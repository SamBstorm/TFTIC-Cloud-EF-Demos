// <auto-generated />
using System;
using Demo01;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Demo01.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240906073530_add datas")]
    partial class adddatas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Demo01.Entities.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ReleaseDate")
                        .IsUnique();

                    b.ToTable("Softs", t =>
                        {
                            t.HasCheckConstraint("CK_Software_Description", "LEN([Description]) > 10");

                            t.HasCheckConstraint("CK_Software_Name", "LEN([Name]) > 0");
                        });

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Demo01.Entities.Application", b =>
                {
                    b.HasBaseType("Demo01.Entities.Software");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultimedia")
                        .HasColumnType("bit");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Software_Description", "LEN([Description]) > 10");

                            t.HasCheckConstraint("CK_Software_Name", "LEN([Name]) > 0");
                        });

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Description = "Application de rencontre",
                            IsOnline = true,
                            Name = "Tinder",
                            ReleaseDate = new DateTime(2012, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMobile = true,
                            IsMultimedia = false
                        },
                        new
                        {
                            Id = 6,
                            Description = "Application de partage de contenu multimédia, réseau social",
                            IsOnline = true,
                            Name = "Instagram",
                            ReleaseDate = new DateTime(2010, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMobile = true,
                            IsMultimedia = true
                        },
                        new
                        {
                            Id = 7,
                            Description = "Application de visualisation de manga, service de streaming",
                            IsOnline = true,
                            Name = "CrunchyRoll",
                            ReleaseDate = new DateTime(2006, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMobile = true,
                            IsMultimedia = true
                        },
                        new
                        {
                            Id = 8,
                            Description = "IDE pour le framework .net",
                            IsOnline = true,
                            Name = "Visual Studio",
                            ReleaseDate = new DateTime(1997, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMobile = false,
                            IsMultimedia = false
                        });
                });

            modelBuilder.Entity("Demo01.Entities.Game", b =>
                {
                    b.HasBaseType("Demo01.Entities.Software");

                    b.Property<bool>("IsSplitScreen")
                        .HasColumnType("bit");

                    b.Property<string>("PegiClassification")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Software_Description", "LEN([Description]) > 10");

                            t.HasCheckConstraint("CK_Software_Name", "LEN([Name]) > 0");
                        });

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Jeu de réflexion, puzle game, style SuperFactory.",
                            IsOnline = false,
                            Name = "Shapez 2",
                            ReleaseDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSplitScreen = false,
                            PegiClassification = "NaN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Jeu de course Arcade",
                            IsOnline = true,
                            Name = "TrackMania",
                            ReleaseDate = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSplitScreen = true,
                            PegiClassification = "+3"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Action-RPG dans un univers cyber-punk, shooter-looter",
                            IsOnline = true,
                            Name = "The Ascent",
                            ReleaseDate = new DateTime(2021, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSplitScreen = false,
                            PegiClassification = "+18"
                        },
                        new
                        {
                            Id = 4,
                            Description = "TPS PVP PVE spatial",
                            IsOnline = true,
                            Name = "Destiny 2",
                            ReleaseDate = new DateTime(2017, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSplitScreen = false,
                            PegiClassification = "+16"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
